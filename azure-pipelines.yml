trigger:
- master

variables:
  backendServiceArm: 'demo'
  backendAzureRmResourceGroupName: 'resourcegroup-devops-tfstate'
  backendAzureRmStorageAccountName: 'terraform0tfstate0jo'
  backendAzureRmContainerName: 'tfstate'
  location: 'westeurope'
  tfBackendEnvironment: tf_backend
  devEnvironment: dev
  testEnvironment: test
  prodEnvironment: prod
  tfWorkingDirectory: 'terraform'

stages:
- template: template-create-terraform-backend.yml
  parameters:
    environment: ${{ variables.tfBackendEnvironment }}
    environmentDisplayName: Create TF Backend
    backendServiceArm: ${{ variables.backendServiceArm }}
    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
    backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
    backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
    location: ${{ variables.location }}
    dependsOn: []

- template: template-terraform-stages.yml
  parameters:
    environment: ${{ variables.devEnvironment }}
    environmentDisplayName: Dev
    backendServiceArm: ${{ variables.backendServiceArm }}
    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
    backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
    backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
    backendAzureRmKey: $(devEnvironment).tfstate
    workingDirectory: $(tfWorkingDirectory)
    dependsOn: ['${{ variables.tfBackendEnvironment }}']

- template: template-terraform-stages.yml
  parameters:
    environment: ${{ variables.testEnvironment }}
    environmentDisplayName: Test
    backendServiceArm: ${{ variables.backendServiceArm }}
    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
    backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
    backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
    backendAzureRmKey: $(testEnvironment).tfstate
    workingDirectory: $(tfWorkingDirectory)
    dependsOn: ['${{ variables.tfBackendEnvironment }}']

- template: template-terraform-stages.yml
  parameters:
    environment: ${{ variables.prodEnvironment }}
    environmentDisplayName: Production
    backendServiceArm: ${{ variables.backendServiceArm }}
    backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
    backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
    backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
    backendAzureRmKey: $(prodEnvironment).tfstate
    workingDirectory: $(tfWorkingDirectory)
    dependsOn: ['${{ variables.tfBackendEnvironment }}', '${{ variables.devEnvironment }}', '${{ variables.testEnvironment }}']

- stage: Destroy_Environment
  displayName: Destroy Environment
  dependsOn: ['${{ variables.prodEnvironment }}']
  jobs:
  - job: Destroy_Terraform_Resources
    displayName: Destroy Terraform Resources
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: Terraform@2
      displayName: Terraform Init
      inputs:
        workingDirectory: $(tfWorkingDirectory)
        command: init
      env:
        ARM_CLIENT_ID: $(system.variables['agent.servicePrincipal.clientId'])
        ARM_CLIENT_SECRET: $(system.variables['agent.servicePrincipal.clientSecret'])
        ARM_SUBSCRIPTION_ID: $(system.variables['agent.servicePrincipal.subscriptionId'])
        ARM_TENANT_ID: $(system.variables['agent.servicePrincipal.tenantId'])

    - task: Terraform@2
      displayName: Terraform Destroy
      inputs:
        workingDirectory: $(tfWorkingDirectory)
        command: destroy
      env:
        ARM_CLIENT_ID: $(system.variables['agent.servicePrincipal.clientId'])
        ARM_CLIENT_SECRET: $(system.variables['agent.servicePrincipal.clientSecret'])
        ARM_SUBSCRIPTION_ID: $(system.variables['agent.servicePrincipal.subscriptionId'])
        ARM_TENANT_ID: $(system.variables['agent.servicePrincipal.tenantId'])